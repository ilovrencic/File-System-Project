initSidebarItems({"mod":[["controller","Implementation of a physical disk and a very simple device controller for it. The device and its contents are represented by a file in your file system, that is memory mapped and stored in a Device struct. When initializing the controller, you have to provide it with either a path to a non-existing file, which will then be created and used as the contents of your device, or to an existing file, which will be opened and the contents of which will be checked. Provides a basic block read and write operation on a device at a given offset. The memory-mapped file is what the read and write functions operate on."],["error_given","The errors I used in the given code. You can use this file as an inspiration to write down your own error types."],["fs","Collection of all traits you will be implementing throughout the different assignments Each file system must at least implement the `FileSysSupport` trait. Do not just blindly implement the below traits; in most cases, it is a good idea to define auxiliary functions, to e.g. figure out in what block inode $i$ is stored, how many directory entries fit in a block, or to read a specific byte from a block. Make sure your implementation provides auxiliary functions for repetitive tasks like these. You might need to wrap (some of) the types I provided in the API into your own types, to be able to define additional behavior on them."],["types","Module containing the types used in this project. You can define your own wrappers around these types if you need more than the provided functionality."]]});